/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.standart_column.getter;

import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeTable;
import org.gephi.data.attributes.api.AttributeType;
import org.gephi.datalab.api.AttributeColumnsController;
import org.gephi.datalab.spi.DialogControls;
import org.gephi.datalab.spi.Manipulator;
import org.gephi.datalab.spi.ManipulatorUI;
import org.gephi.graph.api.Edge;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.Node;
import org.gephi.standart_column.utilities.StandartColumn;
import org.gephi.standart_column.utilities.StandartColumns;
import org.openide.util.Lookup;

/**
 *
 * @author megaterik
 */
public class GetStandartColumnManipulatorUI extends javax.swing.JPanel implements ManipulatorUI {

    /**
     * Creates new form GetStandartColumnManipulatorUI
     */
    public GetStandartColumnManipulatorUI() {
        initComponents();
        initStandartColumns();
        initComboBox();
    }
    private ArrayList<StandartColumn> columns = new ArrayList<StandartColumn>();
    
    private void initStandartColumns() {
        columns.clear();
        columns.add(StandartColumns.nodeX);
        columns.add(StandartColumns.nodeY);
        columns.add(StandartColumns.nodeZ);
        
        columns.add(StandartColumns.nodeSize);
        
        columns.add(StandartColumns.nodeColor);
        columns.add(StandartColumns.nodeRedColor);
        columns.add(StandartColumns.nodeGreenColor);
        columns.add(StandartColumns.nodeBlueColor);
        
        columns.add(StandartColumns.edgeX);
        columns.add(StandartColumns.edgeY);
        columns.add(StandartColumns.edgeZ);
        
        columns.add(StandartColumns.edgeSize);
    }
    
    private void initComboBox() {
        standartColumnNameComboBox.setModel(new DefaultComboBoxModel(columns.toArray()));
        
        standartColumnLabel.setText(standartColumnNameComboBox.getSelectedItem().toString());
        String title = standartColumnNameComboBox.getSelectedItem().toString();
        if (title.endsWith(NODE_TABLE)) {
            title = title.substring(0, title.length() - NODE_TABLE.length());
        } else if (title.endsWith(EDGE_TABLE)) {
            title = title.substring(0, title.length() - EDGE_TABLE.length());
        }
        newColumnNameTextField.setText(title + ((StandartColumn) standartColumnNameComboBox.getSelectedItem()).getType());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        standartColumnNameComboBox = new javax.swing.JComboBox();
        standartColumnLabel = new javax.swing.JLabel();
        newColumnNameTextField = new javax.swing.JTextField();
        getColumnButton = new javax.swing.JButton();
        newColumnNameLabel = new javax.swing.JLabel();

        standartColumnNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        standartColumnNameComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                standartColumnNameComboBoxItemStateChanged(evt);
            }
        });

        standartColumnLabel.setText(org.openide.util.NbBundle.getMessage(GetStandartColumnManipulatorUI.class, "GetStandartColumnManipulatorUI.standartColumnLabel.text")); // NOI18N

        newColumnNameTextField.setText(org.openide.util.NbBundle.getMessage(GetStandartColumnManipulatorUI.class, "GetStandartColumnManipulatorUI.newColumnNameTextField.text")); // NOI18N

        getColumnButton.setText(org.openide.util.NbBundle.getMessage(GetStandartColumnManipulatorUI.class, "GetStandartColumnManipulatorUI.getColumnButton.text")); // NOI18N
        getColumnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getColumnButtonActionPerformed(evt);
            }
        });

        newColumnNameLabel.setText(org.openide.util.NbBundle.getMessage(GetStandartColumnManipulatorUI.class, "GetStandartColumnManipulatorUI.newColumnNameLabel.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(getColumnButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(standartColumnLabel)
                                .addGap(93, 93, 93))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(newColumnNameLabel)
                                .addGap(94, 94, 94)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(standartColumnNameComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(newColumnNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(standartColumnNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(standartColumnLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newColumnNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newColumnNameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(getColumnButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void standartColumnNameComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_standartColumnNameComboBoxItemStateChanged
        standartColumnLabel.setText(standartColumnNameComboBox.getSelectedItem().toString());
        String title = standartColumnNameComboBox.getSelectedItem().toString();
        if (title.endsWith(NODE_TABLE)) {
            title = title.substring(0, title.length() - NODE_TABLE.length());
        } else if (title.endsWith(EDGE_TABLE)) {
            title = title.substring(0, title.length() - EDGE_TABLE.length());
        }
        newColumnNameTextField.setText(title + ((StandartColumn) standartColumnNameComboBox.getSelectedItem()).getType());
    }//GEN-LAST:event_standartColumnNameComboBoxItemStateChanged
    private final static String NODE_TABLE = "(Node table)";
    private final static String EDGE_TABLE = "(Edge table)";
    private void getColumnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getColumnButtonActionPerformed
        AttributeColumnsController controller = Lookup.getDefault().lookup(AttributeColumnsController.class);
        String title = newColumnNameTextField.getText();
        AttributeType type = ((StandartColumn) standartColumnNameComboBox.getSelectedItem()).getType();
        AttributeTable table;
        if (((StandartColumn) standartColumnNameComboBox.getSelectedItem()).isNodeTable()) {
            table = Lookup.getDefault().lookup(AttributeController.class).getModel().getNodeTable();
        } else {
            table = Lookup.getDefault().lookup(AttributeController.class).getModel().getEdgeTable();
        }
        controller.addAttributeColumn(table, title, type);
        if (((StandartColumn) standartColumnNameComboBox.getSelectedItem()).isNodeTable()) {
            for (Node node : Lookup.getDefault().lookup(GraphController.class).getModel().getGraph().getNodes()) {
                node.getAttributes().setValue(title, ((StandartColumn) standartColumnNameComboBox.getSelectedItem()).getValue(node));
            }
        } else {
            for (Edge edge : Lookup.getDefault().lookup(GraphController.class).getModel().getGraph().getEdges()) {
                edge.getAttributes().setValue(title, ((StandartColumn) standartColumnNameComboBox.getSelectedItem()).getValue(edge));
            }
        }
    }//GEN-LAST:event_getColumnButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getColumnButton;
    private javax.swing.JLabel newColumnNameLabel;
    private javax.swing.JTextField newColumnNameTextField;
    private javax.swing.JLabel standartColumnLabel;
    private javax.swing.JComboBox standartColumnNameComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setup(Manipulator m, DialogControls dialogControls) {
    }
    
    @Override
    public void unSetup() {
    }
    
    @Override
    public String getDisplayName() {
        return "Get standart column";
    }
    
    @Override
    public JPanel getSettingsPanel() {
        return this;
    }
    
    @Override
    public boolean isModal() {
        return false;
    }
}
